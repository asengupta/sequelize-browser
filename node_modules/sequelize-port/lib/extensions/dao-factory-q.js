define(function (require, exports, module) {
var Q = require('npm-loader!q');
var Utils     = require("../utils");
var DAOFactory = require("../dao-factory")
console.log("Still ok so far....");

(function() {
DAOFactory.prototype.findAllQ = function() {
    return Q.ninvoke(this.findAll.apply(this, arguments), 'done');
};

DAOFactory.prototype.findQ = function() {
    return Q.ninvoke(this.find.apply(this, arguments), 'done');
};

DAOFactory.prototype.countQ = function() {
    return Q.ninvoke(this.count.apply(this, arguments), 'done');
};

DAOFactory.prototype.findOrCreateQ = function() {
    return Q.ninvoke(this.findOrCreate.apply(this, arguments), 'done');
};

DAOFactory.prototype.createOrUpdateQ = function() {
    return Q.ninvoke(this.createOrUpdate.apply(this, arguments), 'done');
};

DAOFactory.prototype.createQ = function() {
    return Q.ninvoke(this.create.apply(this, arguments), 'done');
};

DAOFactory.prototype.findOrBuildQ = function() {
    return Q.ninvoke(this.findOrBuild.apply(this, arguments), 'done');
};

DAOFactory.prototype.findOrCreate = function (params, defaults) {
    var self = this;
    console.log(params);
    return new Utils.CustomEventEmitter(function (emitter) {
        self.find({
            where: params
        }).success(function (instance) {
                if (instance === null) {
                    for (var attrname in defaults) {
                        params[attrname] = defaults[attrname];
                    }

                    self.create(params)
                        .success(function (instance) {
                            console.log("Success " + instance);
                            emitter.emit('success', instance);
                        })
                        .error( function (error) {
                            emitter.emit('error', error);
                        });
                } else {
                    emitter.emit('success', instance);
                }
            }).error(function (error) {
                emitter.emit('error', error);
            });
    }).run();
};

DAOFactory.prototype.findOrBuild = function (params, defaults) {
    var self = this;
    return new Utils.CustomEventEmitter(function (emitter) {
        self.find({
            where: params
        }).success(function (instance) {
                if (instance === null) {
                    for (var attrname in defaults) {
                        params[attrname] = defaults[attrname];
                    }
                    instance = self.build(params);
                }
                emitter.emit('success', instance);
            }).error(function (error) {
                emitter.emit('error', error);
            });
    }).run();
};

DAOFactory.prototype.createOrUpdate = function(params, defaults){
    var self = this;
    return new Utils.CustomEventEmitter(function (emitter) {
        self.findOrBuild(params,defaults).success(function (instance) {
            for (var attrname in defaults) {
                instance[attrname] = defaults[attrname];
            }
            instance.save();
            emitter.emit('success', instance);
            }).error(function (error) {
                emitter.emit('error', error);
            });
    }).run();

};

console.log(typeof DAOFactory);
module.exports = DAOFactory;
return DAOFactory;
})();
});
